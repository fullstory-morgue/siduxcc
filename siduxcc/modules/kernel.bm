# siduxcc-module: kernel
# Copyright (c) 2007 Fabian Wuertz
# License GPL 2
# siduxcc is based on knxcc from Andreas Loibl

#run gettext
. /usr/bin/gettext.sh

register_module kernel $(eval_gettext "Kernel")


function removeKernel()
{
	# check if kernel-remover is installed
	if [ ! -f /usr/sbin/kernel-remover ]; then
		read -p "$(eval_gettext "Kernel-remover is missing! Do you want do install it?") <yes/no>"
		if [ "$REPLY" = "yes" ]; then
			apt-get update
			apt-get install sidux-kernelhacking
			kernel-remover -x $1
		fi
	else
		kernel-remover -x $1
	fi

	echo ""
	echo "$(eval_gettext "Process done!")"
	echo "$(eval_gettext "Press <Enter> to continue...")"
	read
}


function currentKernel()
{
	uname -r | cut -f2 -d-
}

function kernelType()
{
	if [ -n "$(uname -r | grep slh-smp)" ]; then
		echo slh-smp
	elif [ -n "$(uname -r | grep slh-64smp)" ]; then
		echo slh64-smp
	fi
}


function newestKernel()
{
	TMP="$(mktemp -p /tmp/ newestKernel-XXXXXXXXXX)"
	wget --timeout=3  -O $TMP -q http://debian.tu-bs.de/project/sidux/kernel/
	if [ "$(cat $TMP)" == "" ]; then
		echo "no_connection"
	else
		egrep $(kernelType) $TMP | cut -f3 -d">" | awk '{print (substr($1,8,length($1)-14))}'
	fi
	rm -f $TMP
}


function stableKernel()
{
	TMP="$(mktemp -p /tmp/ stableKernel-XXXXXXXXXX)"
	wget --timeout=3  -O $TMP -q http://debian.tu-bs.de/project/sidux/debian/dists/sid/main/binary-i386/Packages
	if [ "$(cat $TMP)" == "" ]; then
		echo "no_connection"
	else
		egrep -m 3 "Package: linux-headers" $TMP | tail -n 1 | cut -f4 -d-
	fi
	rm -f $TMP
}


function experimentalKernel()
{
	TMP="$(mktemp -p /tmp/ experimentalKernel-XXXXXXXXXX)"
	wget --timeout=3  -O $TMP -q http://debian.tu-bs.de/project/sidux/kernel/experimental/
	if [ "$(cat $TMP)" == "" ]; then
		echo "no_connection"
	else
		egrep $(kernelType) $TMP | cut -f3 -d">" | awk '{print (substr($1,8,length($1)-14))}'
	fi
	rm -f $TMP
}


installKernel()
{
	# $1: type, stable, experimental

	case $1 in
			stable)
				apt-get update
				apt-get install linux-image-2.6-sidux-686 linux-headers-2.6-sidux-686
				;;
			experimental) echo "na";;
	esac

	echo ""
	echo "$(eval_gettext "The installation is finished!")"
	echo "$(eval_gettext "Press <Enter> to continue...")"
	read

}


getModules()
{

	if [ "$(cat $TMP)" == "" ]; then
		echo "no_connection"
	else
		egrep "modules-2" $TMP | grep "Package:" | grep "686" | cut -f2 -d" "
	fi
	rm -f $TMP
}


installModules()
{
	apt-get install $@

	echo ""
	echo "$(eval_gettext "Process done!")"
	echo "$(eval_gettext "Press <Enter> to continue...")"
	read
}


getKernelData()
{

	# get the current kernel
	echo "<-- current kernel -->"
	uname -r | cut -f2 -d-

	#download package list
	BZIP="$(mktemp -p /tmp/ kernelData1-XXXXXXXXXX)"
	wget --timeout=3  -O $BZIP -q http://debian.tu-bs.de/project/sidux/debian/dists/sid/main/binary-i386/Packages.bz2
	TMP="$(mktemp -p /tmp/ kernelData2-XXXXXXXXXX)"
	bunzip2 -c $BZIP > $TMP


	# check connection
	if [ "$(cat $TMP)" == "" ]; then
		echo "no_connection"
		return
	fi


	# get the newest stable kernel
	echo "<-- newest stable kernel -->"
	egrep -m 3 "Package: linux-headers" $TMP | tail -n 1 | cut -f4 -d-


	# get the kernel modules
	echo "<-- kernel modules -->"
	egrep "modules-2" $TMP | grep "Package:" | grep "686" | cut -f2 -d" "

	rm -f $BZIP
	rm -f $TMP

}


dlgInstallKernel()
{
	
	nKernel=$(newestKernel)
	eKernel=$(experimentalKernel)
	cKernel=$(currentKernel)

	choice=$(dlg --menu "$(eval_gettext "Select a kernel")" 0 0 0 "newest" "$nKernel" "experimental" "$eKernel" )

	if [ $? -eq 0 ]; then

		case $choice in
			newest) sKernel=$nKernel;;
			experimental) sKernel=$eKernel;;
		esac

		if [ $skernel =  $cKernel ]; then
			dlg --msgbox "$(eval_gettext "The versions of the new and the current Kernel are the same!")"
		else

			case $choice in
				newest) installKernel $sKernel;;
				experimental) installKernel $sKernel exp;;
			esac
		fi
	fi

}


function getOldKernels()
{
	pushd /boot 2>&1 >>/dev/null
	for v in vmlinuz-*; do
		Kernel=$(echo $v|sed s/vmlinuz-//)
		if [ "${Kernel}" != "$(uname -r)" ]; then
			echo $Kernel
		fi
	done
	popd 2>&1 >> /dev/null
}


function getKernelDirs()
{
	if [ -d /usr/src/kernel-downloads ]; then
		cd /usr/src/kernel-downloads
		ls -d */
	fi
}

function kernel_interface()
{
	while true;
	do
		kernel=$(dlg --menu "$(eval_gettext "Kernel"): $(currentKernel)" 0 0 0 \
			"remover"  "$(eval_gettext "Run kernel-remover")" \
			"update" "$(eval_gettext "Update kernel")" \
			"return"   "$(eval_gettext "Return to main menu")" )

		case $kernel in
			remover) kernel-remover;;
			update)  dlgInstallKernel;;
			return|"") break;;
		esac
	done
}



