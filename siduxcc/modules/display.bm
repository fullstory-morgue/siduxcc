# siduxcc-module: display
# Copyright (c) 2007 Fabian Wuertz
# License GPL 2
# siduxcc is based on knxcc from Andreas Loibl

#run gettext
. /usr/bin/gettext.sh

register_module display $(eval_gettext "Display")

X_CONF="/etc/X11/xorg.conf"
DM="$(cat /etc/X11/default-display-manager 2>/dev/null)"
DM="$(basename $DM 2>/dev/null)"
[ -z "$DM" ] && DM=kdm


# Screen Resolution
# ------------------

function getResolution()
{
	xdpyinfo | sed -n 's/^.*dimensions:\s*\(.*\) pixels.*$/\1/p'
}

function setResolution()
{
	backupX
	fix-res $1
}

function fix-res()
{
	# (C) 2005 Joerg Schirottke <master@kanotix.com>
	# (C) 2005-2006 modified by Stefan Lippers-Hollman <s.l-h@gmx.de>

	PERL=$(type -p perl) || PERL="/usr/bin/perl"

	for i in "$PERL"; do
		if [ ! -x "$i" ]; then
			echo "$i: missing, terminate abnormally."
			exit 999
		fi
	done
	
	if [ "$UID" -ne 0 ]; then
		echo Error: You must be root to run this script!
		exit 1
	fi
	
	MODE=""
	MODE_NUM=7
	MODE_X[1]=640
	MODE_Y[1]=480
	MODE_X[2]=800
	MODE_Y[2]=600
	MODE_X[3]=1024
	MODE_Y[3]=768
	MODE_X[4]=1152
	MODE_Y[4]=864
	MODE_X[5]=1280
	MODE_Y[5]=1024
	MODE_X[6]=1400
	MODE_Y[6]=1050
	MODE_X[7]=1600
	MODE_Y[7]=1200
	
	
	if [ "$1" != "" ]; then
		X=1024
		Y=768
	
		if echo $1|grep -q '^[0-9]\{3,4\}*x[0-9]\{3,4\}*$'; then
			X=$(echo "$1"|cut -f1 -dx)
			Y=$(echo "$1"|cut -f2 -dx)
		fi
	
		MODE_MAX=0
	
		for i in $(seq $MODE_NUM); do
			[[ ${MODE_X[$i]} -le $X && ${MODE_Y[$i]} -le $Y && ${MODE_X[$i]} != $X && ${MODE_Y[$i]} != $Y ]] && MODE_MAX="$i"
		done
	
		MODE_MIN=0
	
		for i in $(seq $MODE_MAX -1 1); do
			[[ ${MODE_X[$i]} -le $X && ${MODE_Y[$i]} -le $Y && ${MODE_X[$i]} != $X && ${MODE_Y[$i]} != $Y ]] && MODE_MIN="$i"
		done
	
		MODE="\"${X}x${Y}\""
		if [ $MODE_MIN -gt 0 ]; then
			for i in $(seq $MODE_MAX -1 $MODE_MIN); do
				MODE="$MODE \"${MODE_X[$i]}x${MODE_Y[$i]}\""
			done
		fi
	else
		MODE="\"1024x768\" \"800x600\" \"640x480\""
	fi
	
	"$PERL" -pi -e "s/(Modes).*/\1 $MODE/" "$X_CONF"
}


function ssftResolution()
{
	SSFT_DEFAULT="$(getResolution)"
	ssft_menu "${Title}" "$(eval_gettext "Select new Resolution")" 640x480 800x600 1024x768 1152x864 1280x1024 1400x1050 1600x1200 custom

	echo $SSFT_RESULT
	if [ "$SSFT_RESULT" != "" ]; then
		echo $SSFT_RESULT
		if [ "$SSFT_RESULT" = "custom" ]; then
			echo hallo
			SSFT_DEFAULT=1024x768
			ssft_read_string "${Title}" "$(eval_gettext "Enter new Resolution:")"
			[ $? -ne 0 ] && SSFT_RESULT=
		fi
		if [ "$SSFT_RESULT" ]; then
			fix-res $SSFT_RESULT \
			&& ssft_display_message "${Title}" "$(eval_gettext "The resolution has been changed successfully to $SSFT_RESULT.")" \
			|| ssft_display_message "${Title}" "$(eval_gettext "An Error occurred while changing the resolution to $SSFT_RESULT!")"
		fi
	fi
}


# Screen Frequenz
# --------------

function getHorizSync()
{
	awk '{if($1=="HorizSync"){print $4}}' $X_CONF
}

function setHorizSync()
{
	backupX
	perl -pi -e "s/^(\s*HorizSync).*/\1 31 - $1/" $X_CONF
}

function getVertRefresh()
{
	awk '{if($1=="VertRefresh"){print $4}}' $X_CONF
}

function setVertRefresh()
{
	backupX
	perl -pi -e "s/^(\s*VertRefresh).*/\1 50 - $1/" $X_CONF
}

function ssftFrequenz()
{

	ssft_yesno "${Title}" "$(eval_gettext "Do you have a TFT-monitor?")"
	if [ $? -eq 1 ]; then
		SSFT_DEFAULT="$(getVertRefresh)" || SSFT_DEFAULT="75"
		ssft_read_string "${Title}" "$(eval_gettext "Enter new vertical refresh rate:")"
		if [ $? -eq 0 ]; then
			setVertRefresh $SSFT_DEFAULT \
			&& ssft_display_message "${Title}" "$(eval_gettext "The vertical refresh rate has been changed successfully to $SSFT_DEFAULT.")" \
			|| ssft_display_message "${Title}" "$(eval_gettext "An Error occurred while changing the vertical refresh rate to $SSFT_DEFAULT!")"
		fi
	fi

	SSFT_DEFAULT="$(getHorizSync)" || SSFT_DEFAULT="65"
	ssft_read_string "${Title}" "$(eval_gettext "Enter new horizontal sync rate:")"
	if [ $? -eq 0 ]; then
		setHorizSync $SSFT_DEFAULT \
		&& ssft_display_message "${Title}" "$(eval_gettext "The horizontal sync rate has been changed successfully to $SSFT_DEFAULT.")" \
		|| ssft_display_message "${Title}" "$(eval_gettext "An Error occurred while changing the vertical refresh rate to $SSFT_DEFAULT!")"
	fi

}

# DPI-Settings
# ------------

function getDpi()
{
	DPI=$(xdpyinfo | grep resolution | cut -f7 -d" " | cut -f2 -d"x")

	#if [ "$DPI" != "" ]; then
	#	echo $DPI
	#else
	#	DPI=$(sed -ne 's/^.*ServerArgsLocal=-nolisten tcp.*-dpi \([^ ]*\).*$/\1/p' < /etc/kde3/kdm/kdmrc)
	#fi

	if [ "$DPI" != "" ]; then
		echo $DPI
	else
		echo "96"
	fi
	
}

function setDpi()
{
	if [ $1 -eq $(getDpi) ]; then
		echo "DPI-Settings unchanged."
		return 128
	else
		fix-dpi-kdm $1
	fi
}


function ssftDpi()
{
	SSFT_DEFAULT="$(getDpi)" || SSFT_DEFAULT="96"
	ssft_read_string "${Title}" "$(eval_gettext "Enter new DPI-Settings:")"
	if [ "$SSFT_RESULT" != "" ]; then
		setDpi $SSFT_RESULT \
		&& ssft_display_message "${Title}" "$(eval_gettext "The DPI-Settings have been changed successfully to $SSFT_RESULT dpi.")" \
		|| ssft_display_message "${Title}" "$(eval_gettext "An Error occurred while changing the DPI-Settings to $SSFT_RESULT dpi!")"	
	fi
}


# ColorDepth
# ----------

function getColorDepth()
{
	awk '/DefaultColorDepth/{print $2}' < $X_CONF
}

function setColorDepth()
{
	if [ $1 -eq $(getColorDepth) ]; then
		echo "color depth unchanged."
		return 128
	else
		backupX
		perl -pi -e "s/^(\s*DefaultColorDepth).*/\1 $1/" $X_CONF
	fi
}

function ssftColorDepth()
{
	cdepth="$(getColorDepth)"
	case $cdepth in
		8|15|16|24) SSFT_DEFAULT="$cdepth bit";;
		*) SSFT_DEFAULT="24 bit";;
	esac
	ssft_menu "${Title}" "$(eval_gettext "Default Color Depth")" "8 bit" "15 bit" "16 bit" "24 bit"

	if [ "$SSFT_RESULT" != "" ]; then
			setColorDepth $SSFT_RESULT \
			&& ssft_display_message "${Title}" "$(eval_gettext "The Colordepth has been changed successfully to $SSFT_RESULT.")" \
			||ssft_display_message "${Title}" "$(eval_gettext "An Error occurred while changing the Colordepth to $SSFT_RESULT")"
	fi
}


# Driver
# ----------


function getSection()
{
	[ $# -ne 1 ] && return 1
	Section="$1"
		
sedScript="$(cat <<ENDE
    # search for Section
    /^\s*Section "$Section"/!bc
    :a
    # get the next line
    N
    /\s*EndSection/!ba
    p
    :c
    d
ENDE
)"

	sed -e "$sedScript" < $X_CONF
}


function getDriver()
{
	getSection "Device" | awk "(\$1==\"Driver\"){print \$2}" | sed -e 's/^"\(.*\)"$/\1/;'
}

function setDriver()
{
	if [ $1 -eq $(getDriver) ]; then
		echo "Driver-Settings unchanged."
		return 128
	else
		backupX
		perl -pi -e 's/^[\s]*#*[\s]*Option\s*"RENDER".*/#\tOption\t"RENDER"\t"1"/' $X_CONF
		perl -pi -e "s/^[\s]*Driver\s*\"$(getDriver)\"/\tDriver         \"$1\"/g;" $X_CONF
	fi
}


function getComposite()
{
	if ! grep -i Option[[:space:]]*\"Composite\" $X_CONF | egrep -qv ^\s*#; then
		echo "NOT USED"
		return 128
	elif [ "$(eval echo $(grep -i Option[[:space:]]*\"Composite\" $X_CONF) | cut -d\  -f3)" -eq 0 ]; then
		echo "NOT USED"
		return 128
	else
		echo "USED"
		return 0
	fi
}

function setComposite()
{
		if [ $1 = "true" ]; then
			perl -pi -e 's/^[\s]*#*[\s]*Option\s*"Composite".*/\tOption\t"Composite"\t"1"/' $X_CONF
		else
			perl -pi -e 's/^[\s]*#*[\s]*Option\s*"Composite".*/#\tOption\t"Composite"\t"1"/' $X_CONF
		fi
}


# Fonts
# -----

function fixFonts()
{
	clear
	fix-fonts
	echo ""
	echo "$(eval_gettext "Press <Enter> to continue...")"
	read

}

# Modelines
# ---------

function removeModelines()
{
	backupX
	perl -pi -e 's/^.*Mode.ine.*\n?//g' $X_CONF
}

# X-Server
# --------

function backupX()
{
	tmp=`date -u +%Y%m%d%H%M`
	cp $X_CONF $X_CONF.$tmp
}

function restoreX()
{
	ssft_menu "${Title}" "$(eval_gettext "Select the file that should be restore")" $(ls $X_CONF.*)
	cp -f $SSFT_RESULT $X_CONF
}

function restartX()
{
	/etc/init.d/$DM stop &>/dev/null
	chvt 7 || chvt -t 7
	/etc/init.d/$DM start &>/dev/null
}

# Driver
# ------

function binaryGfx()
{
	#clear
	get-sidux-binary-gfx
	install-binary-gfx -a
	echo "$(eval_gettext "Press <Enter> to continue...")"
	read
}



# ssft
# ---------

function ssftDisplay()
{

	while true;
	do
		ssft_menu "${Title}" "$(eval_gettext "Please make your choice:")" \
			"$(eval_gettext "set max resolution")"      \
			"$(eval_gettext "set scanning frequency")" \
			"$(eval_gettext "set screen DPI")"    \
			"$(eval_gettext "set color depth")"     \
			"$(eval_gettext "remove modelines")"       \
			"$(eval_gettext "restore X-Server")"
			#"$(eval_gettext "Restart X-Server")"
			#"$(eval_gettext "Register/Repair fonts")" \
			#"$(eval_gettext "Install Ati/nVidia 3d drivers")" \
	
		case $SSFT_RESULT in
			$(eval_gettext "set max resolution")     ) ssftResolution;;
			$(eval_gettext "set scanning frequency") ) ssftFrequenz;;
			$(eval_gettext "set screen DPI")         ) ssftDpi;;
			$(eval_gettext "set color depth")        ) ssftColorDepth;;
			$(eval_gettext "remove modelines")       ) removeModelines;;
			$(eval_gettext "register/repair fonts")  ) fixFonts;;
			$(eval_gettext "restart X-Server")       ) restartX;;
			$(eval_gettext "restore X-Server")       ) restoreX;;
			"") break;;
		esac
	done
}
