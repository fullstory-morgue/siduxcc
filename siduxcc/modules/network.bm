# siduxcc-module: network
# Copyright (c) 2007 Fabian Wuertz
# License GPL 2
# siduxcc is based on 
# knxcc from Andreas Loibl 
# and netcardconfig
# (C) 2006 Niall Walsh to integrate wlan cards
# (C) 2004-2007 by Stefan Lippers-Hollmann <s.l-h@gmx.de>
# (C) 2007 by Horst Tritremmel <hjt@sidux.com>


#run gettext
. /usr/bin/gettext.sh

register_module network $(eval_gettext "Network")


IFS_SP=" "
IFS_NL="$(echo -e "\n")"
IFS_CR="$(echo -e "\r")"

TMP="$(mktemp -t siduxcc_network.XXXXXX)"
iface_temp="$(mktemp -t siduxcc_network.iface.XXXXXX)"


#------------------------------------------------------------------------------#
#--- hostname -----------------------------------------------------------------#
#------------------------------------------------------------------------------#


function getHostname()
{
	hostname
}

function setHostname()
{
	hostname $1
}


function dlgHostname()
{
	oldHostname="$(getHostname)"
	newHostname=$(dlg --inputbox "$(eval_gettext "Enter a new hostname:")" 0 0 "$oldHostname")
	if [ $? -eq 0 ]; then
		setHostname $newHostname \
		&& dlg --msgbox "$(eval_gettext "The hostname have been changed successfully to $newHostname.")" \
		|| dlg --msgbox "$(eval_gettext "An Error occurred while changing the hosntame to $newHostname!")"
	fi
}

#------------------------------------------------------------------------------#
#--- nameservers --------------------------------------------------------------#
#------------------------------------------------------------------------------#

function getNameservers()
{
	awk '{if($1=="nameserver"){print $2}}' /etc/resolv.conf
}

function setNameservers()
{
	> /etc/resolv.conf
	while (($#))
	do
		echo nameserver "$1" >> /etc/resolv.conf
		shift
	done
}

#------------------------------------------------------------------------------#
#--- status -------------------------------------------------------------------#
#------------------------------------------------------------------------------#

function getStatus()
{
	DV=$1
	ip=$(/sbin/ifconfig $DV | grep "inet addr" | gawk -F: '{print $2}' | gawk '{print $1}')
	method=$(awk '/^\s*iface/{if($2=="'"$DV"'"){print $4}}' /etc/network/interfaces)
	boot=$(grep auto /etc/network/interfaces | grep -q $DV && echo auto)
	run=$(grep $DV /etc/network/run/ifstate)

	if [ -z $run ]; then 
		run="not_running"; 
	else
		run="running"; 
	fi

	echo "+"$ip
	echo "+"$method
	echo "+"$boot
	echo "+"$run
}

#------------------------------------------------------------------------------#
#--- mode ---------------------------------------------------------------------#
#------------------------------------------------------------------------------#

function getModes()
{
	awk '{if(/^[ \t]*(auto|allow-)/)if(/[ \t]'$1'[ \t]*/){print "+"$1}else{printf "+"}}' /etc/network/interfaces | tr '\n' ' '; echo ""
}

function setMode()
{
	mode=$1
	iface=$2
	awk '{if($1=="'$mode'"){found=1; if(/[ \t]'$iface'[ \t]*/){print}else{sub("[ \t]+$", ""); print $0" '$iface'"}}else{print}}END{if(!found){print "'$mode' '$iface'"}}' /etc/network/interfaces > "$TMP"
	rm -f /etc/network/interfaces
	mv "$TMP" /etc/network/interfaces
}


function unsetMode()
{
    mode=$1
    iface=$2
    awk '{if($1=="'$mode'"){gsub("[ \t]*'$iface'[ \t]*"," "); if(!/^[ \t]*'$mode'[ \t]*$/){print}}else{print}}' /etc/network/interfaces > "$TMP"
    rm -f /etc/network/interfaces
    mv "$TMP" /etc/network/interfaces
}

#------------------------------------------------------------------------------#
#--- lan ----------------------------------------------------------------------#
#------------------------------------------------------------------------------#

function getLanSettings()
{
	interface=$1
	awk '/^\s*iface/{if($2=="'"$interface"'"){found=1; method=$4}else{found=0}} 
	/address/{if(found){address=$NF}}
	/netmask/{if(found){netmask=$NF}}
	/broadcast/{if(found){broadcast=$NF}}
	/gateway/{if(found){gateway=$NF}}
	END{print "+"method"\n+"address"\n+"netmask"\n+"broadcast"\n+"gateway}' /etc/network/interfaces
}


#------------------------------------------------------------------------------#
#--- wlan ---------------------------------------------------------------------#
#------------------------------------------------------------------------------#

function getWlanSettings()
{
	DV=$1
	awk	'/iface/{if(/'"$DV"'/){found=1}else{found=0}} 
	/essid/{if(found){for(i=NF;i>=2;i--)essid=$i "~" essid}}
	/nwid/{if(found){nwid=$NF}}
	/mode/{if(found){mode=$NF}}
	/channel/{if(found){channel=$NF}}
	/freq/{if(found){freq=$NF}}
	/sens/{if(found){sens=$NF}}
	/rate/{if(found){rate=$NF}}
	/rts/{if(found){rts=$NF}}
	/frag/{if(found){frag=$NF}}
	/iwconfig/{if(!/KEY/){if(found){iwconfig=$NF}}}
	/iwspy/{if(found){iwspy=$NF}}
	/iwpriv/{if(found){iwpriv=$NF}}
	/wireless[-_]key/{if(found){gsub(/^\W*wireless[-_]key\W*/,"");key=$0}}
	END{
		if (!(length(essid))){essid="~~~"}
		if (!(length(nwid))){nwid="~~~"}
		if (!(length(mode))){mode="~~~"}
		if (!(length(channel))){channel="~~~"}
		if (!(length(freq))){freq="~~~"}
		if (!(length(sens))){sens="~~~"}
		if (!(length(rate))){rate="~~~"}
		if (!(length(rts))){rts="~~~"}
		if (!(length(frag))){frag="~~~"}
		if (!(length(iwconfig))){iwconfig="~~~"}
		if (!(length(iwspy))){iwspy="~~~"}
		if (!(length(iwpriv))){iwpriv="~~~"}
		if (!(length(key))){key="~~~"}
		print essid" "nwid" "mode" "channel" "freq" "sens" "rate" "rts" "frag" "iwconfig" "iwspy" "iwpriv" "key
	}' /etc/network/interfaces >"$TMP"
	
	read ESSID NWID MODE CHANNEL FREQ SENS RATE RTS FRAG IWCONFIG IWSPY IWPRIV KEY<"$TMP"
	
	[ "$ESSID" = "~~~" ] &&		ESSID=""
	[ "$MODE" = "~~~" ] &&		MODE=""
	[ "$CHANNEL" = "~~~" ] &&	CHANNEL=""
	[ "$FREQ" = "~~~" ] &&		FREQ=""
	[ "$SENS" = "~~~" ] &&		SENS=""
	[ "$RATE" = "~~~" ] &&		RATE=""
	[ "$RTS" = "~~~" ] &&		RTS=""
	[ "$FRAG" = "~~~" ] &&		FRAG=""
	[ "$NWID" = "~~~" ] &&		NWID=""
	[ "$IWCONFIG" = "~~~" ] &&	IWCONFIG=""
	[ "$IWSPY" = "~~~" ] &&		IWSPY=""
	[ "$IWPRIV" = "~~~" ] &&	IWPRIV=""
	[ "$KEY" = "~~~" ] &&		KEY=""
	
	ESSID=$(echo $ESSID | tr "~" " " | sed 's/ *$//')

	echo "+"$ESSID
	echo "+"$MODE
	echo "+"$CHANNEL
	echo "+"$FREQ
	echo "+"$NWID
	echo "+"$IWCONFIG
	echo "+"$IWSPY
	echo "+"$IWPRIV
	echo "+"$KEY


	WPASECRET=$(awk '/iface/{if(found){found=0}else if (/'"$DV"'/){found=1}}/wpa-psk/{if(found){gsub(/\W*#.*$/,"");if (gsub(/^\W*wpa-psk\W*/,"")){gsub(/\W.*$/,"");print;exit;}}}' /etc/network/interfaces)

	echo "+"$WPASECRET


}


#------------------------------------------------------------------------------#
#--- type ---------------------------------------------------------------------#
#------------------------------------------------------------------------------#

function getType()
{
	DV=$1
	if [ "$(iwconfig 2>/dev/null | awk '/802\.11|READY|ESSID/{print $1}' | grep $DV )" = "$DV" ]; then
		echo "+wlan"
	else
		echo "+lan"
	fi
}


#------------------------------------------------------------------------------#
#--- overview -----------------------------------------------------------------#
#------------------------------------------------------------------------------#

function getNetworkcardConfig()
{
	DV=$1

	type=$(getType $DV)
	echo $type
	getModes $DV
	getLanSettings $DV
	if [ "$type" == "+wlan" ]; then
		getWlanSettings $DV
	fi
}

function setNetworkcardConfig()
{
	DV=$1
	IP=`echo ${2//"+"/" "}`
	NM=`echo ${3//"+"/""}`
	BC=`echo ${4//"+"/""}`
	DG=`echo ${5//"+"/""}`
	BOOT=`echo ${6//"+"/""}`
	HOTPLUG=`echo ${7//"+"/""}`
	ESSID=`echo ${8//"+"/""}`
	MODE=`echo ${9//"+"/""}`
	CHANNEL=`echo ${10//"+"/""}`
	FREQUENCY=`echo ${11//"+"/""}`
	NWID=`echo ${12//"+"/""}`
	IWCONFIG=`echo ${13//"+"/""}`
	IWSPY=`echo ${14//"+"/""}`
	IWPRIV=`echo ${15//"+"/""}`
	KEY=`echo ${16//"+"/""}`
	WPASECRET=`echo ${17//"+"/""}`

	if [ "$BOOT" == "autoboot" ]; then
		setMode auto DV
	else
		unsetMode auto DV;
	fi

	if [ "$HOTPLUG" == "allow-hotplug" ]; then
		setMode allow-hotplug DV
	else
		unsetMode allow-hotplug DV;
	fi


	#writeiwline
	IWOURLINE=""
	if [ -n "$NWID" ]; then 
		IWOURLINE="$IWOURLINE wireless-nwid $NWID\n"
	fi
	
	if [ -n "$MODE" ]; then 
		IWOURLINE="$IWOURLINE wireless-mode $MODE\n"
	fi
	
	if [ -n "$CHANNEL" ]; then 
		IWOURLINE="$IWOURLINE wireless-channel $CHANNEL\n"
	fi
	
	if [ -n "$FREQ" ]; then 
		IWOURLINE="$IWOURLINE wireless-freq $FREQ\n"
	fi
	
	if [ -n "$KEY" ]; then
		# Store the key in interfaces in wireless-key
		IWOURLINE="$IWOURLINE wireless-key $KEY\n"
	fi
	
	if [ -n "$IWCONFIG" ]; then 
		IWPREUPLINE="$IWPREUPLINE iwconfig $IWCONFIG\n"
	fi
	
	if [ -n "$IWSPY" ]; then 
		IWPREUPLINE="$IWPREUPLINE iwspy $IWSPY\n"
	fi
	
	if [ -n "$IWPRIV" ]; then 
		IWPREUPLINE="$IWPREUPLINE iwpriv $IWPRIV\n"
	fi
	
	# execute ESSID last, but make sure that it is written as first option
	if [ -n "$ESSID" ]; then 
		IWOURLINE="$IWOURLINE wireless-essid $ESSID\n"
	fi
	
	if [ -n "$WPASECRET" ]; then
		IWOURLINE="$IWOURLINE wpa-ssid $ESSID\n wpa-psk $WPASECRET\n"
	fi
	
	IWOURLINE="$IWOURLINE $IWPREUPLINE"
	#echo "DEBUG: for interfaces $IWOURLINE"

	if [ $IP == "dhcp" ]; then
		rm -f "$TMP"
		awk	'/iface/{if(/'"$DV"'/){found=1}else{found=0}}
		/^\W$/{if(blank==0){lastblank=1}else{lastblank=0}{blank=1}}
		/\w/{blank=0;lastblank=0}
		{if(!(found+lastblank)){print}}
		END{print "iface '"$DV"' inet dhcp"}' \
		/etc/network/interfaces >"$TMP"
		echo -e "$IWOURLINE" >> $TMP
		cat "$TMP" >/etc/network/interfaces
		rm -f "$TMP"
	else
		awk	'/iface/{if(/'"$DV"'/){found=1}else{found=0}}
		{if(!found){print}}
		END{print "\niface '"$DV"' inet static\n\taddress '"$IP"'\n\tnetmask '"$NM"'\n\tnetwork '"${IP%.*}.0"'";if("'"$BC"'"!=""){print "\tbroadcast '"$BC"'"};if("'"$DG"'"!=""){print "\tgateway '"$DG"'"};if("'"$IWOURLINE"'"!=""){print "'"$IWOURLINE"'"};print "\n"}' \
		/etc/network/interfaces >"$TMP"	
		cat "$TMP" >/etc/network/interfaces
		rm -f "$TMP"

	fi
}



#------------------------------------------------------------------------------#
#--- console interface --------------------------------------------------------#
#------------------------------------------------------------------------------#


function network_interface()
{
	while true;
	do
		network=$(dlg --menu "$(eval_gettext "Network")" 0 0 0 \
			"ceni"       "$(eval_gettext "Configure Networkcars")" \
			"hostname"  "$(eval_gettext "Set Hostname")" \
			"return"     "$(eval_gettext "Return to main Menu")" )
	
		case $network in
			ceni)      ceni;;
			hostname)  dlgHostname;;

			return|"") break;;
			*) dlg --msgbox "$(eval_gettext "Error: This module is not implemented yet!")";;
		esac
	done
}
