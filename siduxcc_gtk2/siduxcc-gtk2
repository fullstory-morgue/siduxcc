#!/usr/bin/env python
#-*- encoding:utf-8 -*-
#
# siduxcc-gtk2
# Gtk frontend for managing sidux.'
# (c) Fabian Wuertz <xadras@sidux.com>
# License: GPL

# Load in pygtk and gtk

import pygtk
pygtk.require( '2.0')
import gtk
import os

GPL = open( '/usr/share/common-licenses/GPL', 'r' ).read()

# Define the main window

class Whc:

    def __init__(self):

        gtk.about_dialog_set_url_hook(self.showUrl, "http://sidux.com")

        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("sidux Control Center")
        self.window.set_default_size(650, 400)
        self.window.set_icon(gtk.gdk.pixbuf_new_from_file('/usr/share/icons/hicolor/16x16/apps/siduxcc.png'))

        # create the table and pack into the window
        self.table = gtk.Table(2, 2, False)
        self.window.add(self.table)


        # create the layout widget and pack into the table
        self.layout = gtk.Layout(None, None)
        self.layout.set_size(630, 380)
        self.table.attach(self.layout, 0, 1, 0, 1, gtk.FILL|gtk.EXPAND, gtk.FILL|gtk.EXPAND, 0, 0)


        # create the scrollbars and pack into the table
        #self.vScrollbar = gtk.VScrollbar(None)
        #self.table.attach(self.vScrollbar, 1, 2, 0, 1, gtk.FILL|gtk.SHRINK, gtk.FILL|gtk.SHRINK, 0, 0)
        #self.hScrollbar = gtk.HScrollbar(None)
        #self.table.attach(self.hScrollbar, 0, 1, 1, 2, gtk.FILL|gtk.SHRINK, gtk.FILL|gtk.SHRINK, 0, 0)


        # tell the scrollbars to use the layout widget's adjustments
        #self.vAdjust = self.layout.get_vadjustment()
        #self.vScrollbar.set_adjustment(self.vAdjust)
        #self.hAdjust = self.layout.get_hadjustment()
        #self.hScrollbar.set_adjustment(self.hAdjust)

        self.sucmd = 'su-to-root -X -c '
        self.icondir = '/usr/share/siduxcc/gtk2/icons/'
        self.browser = 'x-www-browser '
        self.terminal = 'x-terminal-emulator --noclose -e '
        self.space = 130


        # System Configuration
        self.xpos = 10
        self.ypos = 10
        self.label1 = gtk.Label()
        self.label1.set_markup( '<b>System Configuration</b>')
        self.layout.put(self.label1, self.xpos, self.ypos)

        self.xpos = -95
        self.ypos = self.ypos+25
        if os.path.isfile( '/usr/share/doc/xfce4-mcs-manager/copyright'):
                self.checkNextRow()
                self.addButton( self, '   Xfce\nSettings', self.xpos, self.ypos, self.icondir+'settings.png', 'xfce-setting-show')
        if os.path.isfile( '/usr/share/doc/gnome-control-center/copyright'):
                self.checkNextRow()
                self.addButton(self, '  Gnome\nSettings', self.xpos, self.ypos, self.icondir+'gnome.png', 'gnome-control-center')
        self.checkNextRow()
        self.addButton( self, ' Display\nSettings', self.xpos, self.ypos, self.icondir+'display.png', self.sucmd+'\"siduxcc Display\"')
        if os.path.isfile( '/usr/share/doc/ceni/copyright'):
                self.checkNextRow()
                self.addButton( self, 'Network\nSettings',  self.xpos, self.ypos, self.icondir+'network.png', self.terminal+'ceni')
        if os.path.isfile( '/usr/share/doc/install-meta/copyright'):
                self.checkNextRow()
                self.addButton( self, '  Meta-\npackages',  self.xpos, self.ypos, '/usr/share/icons/hicolor/48x48/apps/metapackage-installer.png', self.sucmd+'metapackage-installer')
        if os.path.isfile( '/usr/share/doc/gnome-system-tools/copyright'):
                self.checkNextRow()
                self.addButton( self, ' Users\nGroups',  self.xpos, self.ypos, self.icondir+'users.png', self.sucmd+'users-admin')
                self.xpos = self.xpos+self.space
                self.addButton( self, ' Time/Date', self.xpos, self.ypos, self.icondir+'clock.png', self.sucmd+'time-admin')


        # Hardware Setup
        self.ypos = self.ypos+70
        self.label2 = gtk.Label( '')
        self.label2.set_markup( '<b>Hardware Setup</b>')
        self.layout.put(self.label2, 10, self.ypos)

        self.xpos = -95
        self.ypos = self.ypos+25
        if os.path.isfile( '/usr/share/doc/gnome-alsamixer/copyright'):
                self.checkNextRow()
                self.addButton( self, ' Alsa\nMixer', self.xpos, self.ypos, self.icondir+'audio.png', 'gnome-alsamixer')
        if os.path.isfile( '/usr/share/doc/gnome-cups-manager/copyright'):
                self.checkNextRow()
                self.addButton( self, '  CUPS\nManager', self.xpos, self.ypos, self.icondir+'printer.png', self.sucmd+'gnome-cups-manager')
        if os.path.isfile( '/usr/share/doc/hardinfo/copyright'):
                self.checkNextRow()
                self.addButton( self, 'HardInfo', self.xpos, self.ypos, self.icondir+'info.png', 'hardinfo')


        # Help
        self.ypos = self.ypos+70
        self.label3 = gtk.Label( '')
        self.label3.set_markup( '<b>Help</b>')
        self.layout.put(self.label3, 10, self.ypos)
        self.xpos = -95
        self.ypos = self.ypos+25
        # Button 31
        self.checkNextRow()
        self.addButton(self, 'Manual', self.xpos, self.ypos, '/usr/share/icons/hicolor/48x48/apps/sidux-manual.png', self.browser+'/usr/share/sidux-manual/index.html')
        # Button 32
        self.checkNextRow()
        self.addButton(self, 'Forum', self.xpos, self.ypos, self.icondir+'forum.png', self.browser+'http://www.sidux.com/module-PNphpBB2.html')

        # Button 33
        self.checkNextRow()
        self.addButton(self, 'IRC Chat', self.xpos, self.ypos, '/usr/share/icons/hicolor/48x48/apps/sidux-irc.png', 'sidux-irc')
        # Button 34
        self.checkNextRow()
        self.addButton(self, 'About', self.xpos, self.ypos, self.icondir+'about.png', 'about')

        # show all the widgets
        self.window.show_all()


# Callback function for use when the button is pressed

    def addButton(self, widget, name, x, y, icon, cmd):
        self.image = gtk.Image()
        self.image.set_from_file(icon)
        self.button = gtk.Button(name)
        self.button.set_relief(gtk.RELIEF_NONE)
        self.button.connect("clicked", self.run, cmd+'&')
        self.button.set_image(self.image)
        self.layout.put(self.button, x, y)

    def checkNextRow(self):
        if self.xpos > 295:
             self.xpos = -95
             self.ypos = self.ypos+66
        self.xpos = self.xpos+self.space

    def hello(self, widget, info):
        print "Button %s was pressed" % info
        print "Hello World"

    def run(self, widget, info):
        if info == 'about&':
             self.on_about(self)
        else:
             os.system(info)


    def on_about(self, data):
        self.dialog = gtk.AboutDialog()
        self.dialog.set_name( 'sidux Control Center')
        #dialog.set_version( '0.1')
        self.dialog.set_authors(  ['Fabian Wuertz <xadras@sidux.com>'] )
        self.dialog.set_license(  GPL)
        self.dialog.set_comments( 'Frontend for managing sidux.')
        #self.dialog.set_website(  'http://sidux.com')
        self.dialog.set_website_label("http://sidux.com")
        self.dialog.run()
        self.dialog.destroy()

    def showUrl(self, arg1, arg2, arg3):
        os.system('x-www-browser '+arg3+'&')

# Destroy method causes appliaction to exit
# when main window closed
 
    def destroy(self, widget, data=None):
        gtk.main_quit()
 
# All PyGTK applications need a main method - event loop
 
    def main(self):
        gtk.main()



if __name__ == "__main__":
    base = Whc()
    base.main() 
